{
  "pipes": [],
  "interfaces": [
    {
      "name": "Task",
      "id": "interface-Task-86d5b16a5bee22e67107cf20170aeccc6c410b4fd529d38db393ffcb137a87238502f1f010b511aab47b5ca48afccafe351c703531dcc949de323af431439bf9",
      "file": "src/app/tasks/task/task.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface Task {\n    id: string;\n    title: string;\n    state: string;\n}\n",
      "properties": [
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 2
        },
        {
          "name": "state",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "title",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 3
        }
      ],
      "indexSignatures": [],
      "kind": 165,
      "methods": []
    },
    {
      "name": "TaskStateModel",
      "id": "interface-TaskStateModel-591b5e4e2646332bf37287d910f0841c1d7516f70016872c29fc99fcdabf979093ea49576ecf6da4228738988782044b126e1de445923aa52baf44d088a1dd32",
      "file": "src/app/state/task.state.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import {Injectable} from '@angular/core';\nimport {State, Selector, Action, StateContext} from '@ngxs/store';\nimport {patch, updateItem} from '@ngxs/store/operators';\nimport {Task} from '../tasks/task/task';\n\n// Defines the actions available to the app\nexport const actions = {\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\n  PIN_TASK: 'PIN_TASK',\n  ERROR: 'APP_ERROR',\n};\n\nexport class ArchiveTask {\n  static readonly type = actions.ARCHIVE_TASK;\n\n  constructor(public payload: string) {\n  }\n}\n\nexport class PinTask {\n  static readonly type = actions.PIN_TASK;\n\n  constructor(public payload: string) {\n  }\n}\n\n// The class definition for our error field\nexport class AppError {\n  static readonly type = actions.ERROR;\n\n  constructor(public payload: boolean) {\n  }\n}\n\n// The initial state of our store when the app loads.\n// Usually you would fetch this from a server\nconst defaultTasks = [\n  {id: '1', title: 'Something', state: 'TASK_INBOX'},\n  {id: '2', title: 'Something more', state: 'TASK_INBOX'},\n  {id: '3', title: 'Something else', state: 'TASK_INBOX'},\n  {id: '4', title: 'Something again', state: 'TASK_INBOX'},\n];\n\nexport interface TaskStateModel {\n  tasks: Task[];\n  status: 'idle' | 'loading' | 'success' | 'error';\n  error: boolean;\n}\n\n// Sets the default state\n@State<TaskStateModel>({\n  name: 'taskbox',\n  defaults: {\n    tasks: defaultTasks,\n    status: 'idle',\n    error: false,\n  },\n})\n@Injectable()\nexport class TasksState {\n  // Defines a new selector for the error field\n  @Selector()\n  static getError(state: TaskStateModel): boolean {\n    return state.error;\n  }\n\n  @Selector()\n  static getAllTasks(state: TaskStateModel): Task[] {\n    return state.tasks;\n  }\n\n  // Triggers the PinTask action, similar to redux\n  @Action(PinTask)\n  pinTask(\n    {getState, setState}: StateContext<TaskStateModel>,\n    {payload}: PinTask\n  ) {\n    const task = getState().tasks.find((task) => task.id === payload);\n\n    if (task) {\n      const updatedTask: Task = {\n        ...task,\n        state: 'TASK_PINNED',\n      };\n      setState(\n        patch({\n          tasks: updateItem<Task>(\n            (pinnedTask) => pinnedTask?.id === payload,\n            updatedTask\n          ),\n        })\n      );\n    }\n  }\n\n  // Triggers the archiveTask action, similar to redux\n  @Action(ArchiveTask)\n  archiveTask(\n    {getState, setState}: StateContext<TaskStateModel>,\n    {payload}: ArchiveTask\n  ) {\n    const task = getState().tasks.find((task) => task.id === payload);\n    if (task) {\n      const updatedTask: Task = {\n        ...task,\n        state: 'TASK_ARCHIVED',\n      };\n      setState(\n        patch({\n          tasks: updateItem<Task>(\n            (archivedTask) => archivedTask?.id === payload,\n            updatedTask\n          ),\n        })\n      );\n    }\n  }\n\n  // Function to handle how the state should be updated when the action is triggered\n  @Action(AppError)\n  setAppError(\n    {patchState, getState}: StateContext<TaskStateModel>,\n    {payload}: AppError\n  ) {\n    const state = getState();\n    patchState({\n      error: !state.error,\n    });\n  }\n}\n",
      "properties": [
        {
          "name": "error",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 47
        },
        {
          "name": "status",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "\"idle\" | \"loading\" | \"success\" | \"error\"",
          "optional": false,
          "description": "",
          "line": 46
        },
        {
          "name": "tasks",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Task[]",
          "optional": false,
          "description": "",
          "line": 45
        }
      ],
      "indexSignatures": [],
      "kind": 165,
      "methods": []
    },
    {
      "name": "User",
      "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
      "file": "src/stories/User.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface User {}\n",
      "properties": [],
      "indexSignatures": [],
      "methods": []
    }
  ],
  "injectables": [
    {
      "name": "TasksState",
      "id": "injectable-TasksState-591b5e4e2646332bf37287d910f0841c1d7516f70016872c29fc99fcdabf979093ea49576ecf6da4228738988782044b126e1de445923aa52baf44d088a1dd32",
      "file": "src/app/state/task.state.ts",
      "properties": [],
      "methods": [
        {
          "name": "archiveTask",
          "args": [
            {
              "type": "StateContext<TaskStateModel>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "type": "ArchiveTask",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 98,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "ArchiveTask"
            }
          ],
          "jsdoctags": [
            {
              "type": "StateContext<TaskStateModel>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "type": "ArchiveTask",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getAllTasks",
          "args": [
            {
              "name": "state",
              "type": "TaskStateModel",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Task[]",
          "typeParameters": [],
          "line": 68,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Selector",
              "stringifiedArguments": ""
            }
          ],
          "modifierKind": [124],
          "jsdoctags": [
            {
              "name": "state",
              "type": "TaskStateModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getError",
          "args": [
            {
              "name": "state",
              "type": "TaskStateModel",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 63,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Selector",
              "stringifiedArguments": ""
            }
          ],
          "modifierKind": [124],
          "jsdoctags": [
            {
              "name": "state",
              "type": "TaskStateModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "pinTask",
          "args": [
            {
              "type": "StateContext<TaskStateModel>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "type": "PinTask",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 74,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "PinTask"
            }
          ],
          "jsdoctags": [
            {
              "type": "StateContext<TaskStateModel>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "type": "PinTask",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setAppError",
          "args": [
            {
              "type": "StateContext<TaskStateModel>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "type": "AppError",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 121,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "AppError"
            }
          ],
          "jsdoctags": [
            {
              "type": "StateContext<TaskStateModel>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "type": "AppError",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import {Injectable} from '@angular/core';\nimport {State, Selector, Action, StateContext} from '@ngxs/store';\nimport {patch, updateItem} from '@ngxs/store/operators';\nimport {Task} from '../tasks/task/task';\n\n// Defines the actions available to the app\nexport const actions = {\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\n  PIN_TASK: 'PIN_TASK',\n  ERROR: 'APP_ERROR',\n};\n\nexport class ArchiveTask {\n  static readonly type = actions.ARCHIVE_TASK;\n\n  constructor(public payload: string) {\n  }\n}\n\nexport class PinTask {\n  static readonly type = actions.PIN_TASK;\n\n  constructor(public payload: string) {\n  }\n}\n\n// The class definition for our error field\nexport class AppError {\n  static readonly type = actions.ERROR;\n\n  constructor(public payload: boolean) {\n  }\n}\n\n// The initial state of our store when the app loads.\n// Usually you would fetch this from a server\nconst defaultTasks = [\n  {id: '1', title: 'Something', state: 'TASK_INBOX'},\n  {id: '2', title: 'Something more', state: 'TASK_INBOX'},\n  {id: '3', title: 'Something else', state: 'TASK_INBOX'},\n  {id: '4', title: 'Something again', state: 'TASK_INBOX'},\n];\n\nexport interface TaskStateModel {\n  tasks: Task[];\n  status: 'idle' | 'loading' | 'success' | 'error';\n  error: boolean;\n}\n\n// Sets the default state\n@State<TaskStateModel>({\n  name: 'taskbox',\n  defaults: {\n    tasks: defaultTasks,\n    status: 'idle',\n    error: false,\n  },\n})\n@Injectable()\nexport class TasksState {\n  // Defines a new selector for the error field\n  @Selector()\n  static getError(state: TaskStateModel): boolean {\n    return state.error;\n  }\n\n  @Selector()\n  static getAllTasks(state: TaskStateModel): Task[] {\n    return state.tasks;\n  }\n\n  // Triggers the PinTask action, similar to redux\n  @Action(PinTask)\n  pinTask(\n    {getState, setState}: StateContext<TaskStateModel>,\n    {payload}: PinTask\n  ) {\n    const task = getState().tasks.find((task) => task.id === payload);\n\n    if (task) {\n      const updatedTask: Task = {\n        ...task,\n        state: 'TASK_PINNED',\n      };\n      setState(\n        patch({\n          tasks: updateItem<Task>(\n            (pinnedTask) => pinnedTask?.id === payload,\n            updatedTask\n          ),\n        })\n      );\n    }\n  }\n\n  // Triggers the archiveTask action, similar to redux\n  @Action(ArchiveTask)\n  archiveTask(\n    {getState, setState}: StateContext<TaskStateModel>,\n    {payload}: ArchiveTask\n  ) {\n    const task = getState().tasks.find((task) => task.id === payload);\n    if (task) {\n      const updatedTask: Task = {\n        ...task,\n        state: 'TASK_ARCHIVED',\n      };\n      setState(\n        patch({\n          tasks: updateItem<Task>(\n            (archivedTask) => archivedTask?.id === payload,\n            updatedTask\n          ),\n        })\n      );\n    }\n  }\n\n  // Function to handle how the state should be updated when the action is triggered\n  @Action(AppError)\n  setAppError(\n    {patchState, getState}: StateContext<TaskStateModel>,\n    {payload}: AppError\n  ) {\n    const state = getState();\n    patchState({\n      error: !state.error,\n    });\n  }\n}\n",
      "type": "injectable"
    }
  ],
  "guards": [],
  "interceptors": [],
  "classes": [
    {
      "name": "AppError",
      "id": "class-AppError-591b5e4e2646332bf37287d910f0841c1d7516f70016872c29fc99fcdabf979093ea49576ecf6da4228738988782044b126e1de445923aa52baf44d088a1dd32",
      "file": "src/app/state/task.state.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import {Injectable} from '@angular/core';\nimport {State, Selector, Action, StateContext} from '@ngxs/store';\nimport {patch, updateItem} from '@ngxs/store/operators';\nimport {Task} from '../tasks/task/task';\n\n// Defines the actions available to the app\nexport const actions = {\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\n  PIN_TASK: 'PIN_TASK',\n  ERROR: 'APP_ERROR',\n};\n\nexport class ArchiveTask {\n  static readonly type = actions.ARCHIVE_TASK;\n\n  constructor(public payload: string) {\n  }\n}\n\nexport class PinTask {\n  static readonly type = actions.PIN_TASK;\n\n  constructor(public payload: string) {\n  }\n}\n\n// The class definition for our error field\nexport class AppError {\n  static readonly type = actions.ERROR;\n\n  constructor(public payload: boolean) {\n  }\n}\n\n// The initial state of our store when the app loads.\n// Usually you would fetch this from a server\nconst defaultTasks = [\n  {id: '1', title: 'Something', state: 'TASK_INBOX'},\n  {id: '2', title: 'Something more', state: 'TASK_INBOX'},\n  {id: '3', title: 'Something else', state: 'TASK_INBOX'},\n  {id: '4', title: 'Something again', state: 'TASK_INBOX'},\n];\n\nexport interface TaskStateModel {\n  tasks: Task[];\n  status: 'idle' | 'loading' | 'success' | 'error';\n  error: boolean;\n}\n\n// Sets the default state\n@State<TaskStateModel>({\n  name: 'taskbox',\n  defaults: {\n    tasks: defaultTasks,\n    status: 'idle',\n    error: false,\n  },\n})\n@Injectable()\nexport class TasksState {\n  // Defines a new selector for the error field\n  @Selector()\n  static getError(state: TaskStateModel): boolean {\n    return state.error;\n  }\n\n  @Selector()\n  static getAllTasks(state: TaskStateModel): Task[] {\n    return state.tasks;\n  }\n\n  // Triggers the PinTask action, similar to redux\n  @Action(PinTask)\n  pinTask(\n    {getState, setState}: StateContext<TaskStateModel>,\n    {payload}: PinTask\n  ) {\n    const task = getState().tasks.find((task) => task.id === payload);\n\n    if (task) {\n      const updatedTask: Task = {\n        ...task,\n        state: 'TASK_PINNED',\n      };\n      setState(\n        patch({\n          tasks: updateItem<Task>(\n            (pinnedTask) => pinnedTask?.id === payload,\n            updatedTask\n          ),\n        })\n      );\n    }\n  }\n\n  // Triggers the archiveTask action, similar to redux\n  @Action(ArchiveTask)\n  archiveTask(\n    {getState, setState}: StateContext<TaskStateModel>,\n    {payload}: ArchiveTask\n  ) {\n    const task = getState().tasks.find((task) => task.id === payload);\n    if (task) {\n      const updatedTask: Task = {\n        ...task,\n        state: 'TASK_ARCHIVED',\n      };\n      setState(\n        patch({\n          tasks: updateItem<Task>(\n            (archivedTask) => archivedTask?.id === payload,\n            updatedTask\n          ),\n        })\n      );\n    }\n  }\n\n  // Function to handle how the state should be updated when the action is triggered\n  @Action(AppError)\n  setAppError(\n    {patchState, getState}: StateContext<TaskStateModel>,\n    {payload}: AppError\n  ) {\n    const state = getState();\n    patchState({\n      error: !state.error,\n    });\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "payload",
            "type": "boolean",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 29,
        "jsdoctags": [
          {
            "name": "payload",
            "type": "boolean",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "payload",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 31,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "actions.ERROR",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 29,
          "modifierKind": [124, 144]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "ArchiveTask",
      "id": "class-ArchiveTask-591b5e4e2646332bf37287d910f0841c1d7516f70016872c29fc99fcdabf979093ea49576ecf6da4228738988782044b126e1de445923aa52baf44d088a1dd32",
      "file": "src/app/state/task.state.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import {Injectable} from '@angular/core';\nimport {State, Selector, Action, StateContext} from '@ngxs/store';\nimport {patch, updateItem} from '@ngxs/store/operators';\nimport {Task} from '../tasks/task/task';\n\n// Defines the actions available to the app\nexport const actions = {\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\n  PIN_TASK: 'PIN_TASK',\n  ERROR: 'APP_ERROR',\n};\n\nexport class ArchiveTask {\n  static readonly type = actions.ARCHIVE_TASK;\n\n  constructor(public payload: string) {\n  }\n}\n\nexport class PinTask {\n  static readonly type = actions.PIN_TASK;\n\n  constructor(public payload: string) {\n  }\n}\n\n// The class definition for our error field\nexport class AppError {\n  static readonly type = actions.ERROR;\n\n  constructor(public payload: boolean) {\n  }\n}\n\n// The initial state of our store when the app loads.\n// Usually you would fetch this from a server\nconst defaultTasks = [\n  {id: '1', title: 'Something', state: 'TASK_INBOX'},\n  {id: '2', title: 'Something more', state: 'TASK_INBOX'},\n  {id: '3', title: 'Something else', state: 'TASK_INBOX'},\n  {id: '4', title: 'Something again', state: 'TASK_INBOX'},\n];\n\nexport interface TaskStateModel {\n  tasks: Task[];\n  status: 'idle' | 'loading' | 'success' | 'error';\n  error: boolean;\n}\n\n// Sets the default state\n@State<TaskStateModel>({\n  name: 'taskbox',\n  defaults: {\n    tasks: defaultTasks,\n    status: 'idle',\n    error: false,\n  },\n})\n@Injectable()\nexport class TasksState {\n  // Defines a new selector for the error field\n  @Selector()\n  static getError(state: TaskStateModel): boolean {\n    return state.error;\n  }\n\n  @Selector()\n  static getAllTasks(state: TaskStateModel): Task[] {\n    return state.tasks;\n  }\n\n  // Triggers the PinTask action, similar to redux\n  @Action(PinTask)\n  pinTask(\n    {getState, setState}: StateContext<TaskStateModel>,\n    {payload}: PinTask\n  ) {\n    const task = getState().tasks.find((task) => task.id === payload);\n\n    if (task) {\n      const updatedTask: Task = {\n        ...task,\n        state: 'TASK_PINNED',\n      };\n      setState(\n        patch({\n          tasks: updateItem<Task>(\n            (pinnedTask) => pinnedTask?.id === payload,\n            updatedTask\n          ),\n        })\n      );\n    }\n  }\n\n  // Triggers the archiveTask action, similar to redux\n  @Action(ArchiveTask)\n  archiveTask(\n    {getState, setState}: StateContext<TaskStateModel>,\n    {payload}: ArchiveTask\n  ) {\n    const task = getState().tasks.find((task) => task.id === payload);\n    if (task) {\n      const updatedTask: Task = {\n        ...task,\n        state: 'TASK_ARCHIVED',\n      };\n      setState(\n        patch({\n          tasks: updateItem<Task>(\n            (archivedTask) => archivedTask?.id === payload,\n            updatedTask\n          ),\n        })\n      );\n    }\n  }\n\n  // Function to handle how the state should be updated when the action is triggered\n  @Action(AppError)\n  setAppError(\n    {patchState, getState}: StateContext<TaskStateModel>,\n    {payload}: AppError\n  ) {\n    const state = getState();\n    patchState({\n      error: !state.error,\n    });\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "payload",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 14,
        "jsdoctags": [
          {
            "name": "payload",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "payload",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 16,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "actions.ARCHIVE_TASK",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 14,
          "modifierKind": [124, 144]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "PinTask",
      "id": "class-PinTask-591b5e4e2646332bf37287d910f0841c1d7516f70016872c29fc99fcdabf979093ea49576ecf6da4228738988782044b126e1de445923aa52baf44d088a1dd32",
      "file": "src/app/state/task.state.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import {Injectable} from '@angular/core';\nimport {State, Selector, Action, StateContext} from '@ngxs/store';\nimport {patch, updateItem} from '@ngxs/store/operators';\nimport {Task} from '../tasks/task/task';\n\n// Defines the actions available to the app\nexport const actions = {\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\n  PIN_TASK: 'PIN_TASK',\n  ERROR: 'APP_ERROR',\n};\n\nexport class ArchiveTask {\n  static readonly type = actions.ARCHIVE_TASK;\n\n  constructor(public payload: string) {\n  }\n}\n\nexport class PinTask {\n  static readonly type = actions.PIN_TASK;\n\n  constructor(public payload: string) {\n  }\n}\n\n// The class definition for our error field\nexport class AppError {\n  static readonly type = actions.ERROR;\n\n  constructor(public payload: boolean) {\n  }\n}\n\n// The initial state of our store when the app loads.\n// Usually you would fetch this from a server\nconst defaultTasks = [\n  {id: '1', title: 'Something', state: 'TASK_INBOX'},\n  {id: '2', title: 'Something more', state: 'TASK_INBOX'},\n  {id: '3', title: 'Something else', state: 'TASK_INBOX'},\n  {id: '4', title: 'Something again', state: 'TASK_INBOX'},\n];\n\nexport interface TaskStateModel {\n  tasks: Task[];\n  status: 'idle' | 'loading' | 'success' | 'error';\n  error: boolean;\n}\n\n// Sets the default state\n@State<TaskStateModel>({\n  name: 'taskbox',\n  defaults: {\n    tasks: defaultTasks,\n    status: 'idle',\n    error: false,\n  },\n})\n@Injectable()\nexport class TasksState {\n  // Defines a new selector for the error field\n  @Selector()\n  static getError(state: TaskStateModel): boolean {\n    return state.error;\n  }\n\n  @Selector()\n  static getAllTasks(state: TaskStateModel): Task[] {\n    return state.tasks;\n  }\n\n  // Triggers the PinTask action, similar to redux\n  @Action(PinTask)\n  pinTask(\n    {getState, setState}: StateContext<TaskStateModel>,\n    {payload}: PinTask\n  ) {\n    const task = getState().tasks.find((task) => task.id === payload);\n\n    if (task) {\n      const updatedTask: Task = {\n        ...task,\n        state: 'TASK_PINNED',\n      };\n      setState(\n        patch({\n          tasks: updateItem<Task>(\n            (pinnedTask) => pinnedTask?.id === payload,\n            updatedTask\n          ),\n        })\n      );\n    }\n  }\n\n  // Triggers the archiveTask action, similar to redux\n  @Action(ArchiveTask)\n  archiveTask(\n    {getState, setState}: StateContext<TaskStateModel>,\n    {payload}: ArchiveTask\n  ) {\n    const task = getState().tasks.find((task) => task.id === payload);\n    if (task) {\n      const updatedTask: Task = {\n        ...task,\n        state: 'TASK_ARCHIVED',\n      };\n      setState(\n        patch({\n          tasks: updateItem<Task>(\n            (archivedTask) => archivedTask?.id === payload,\n            updatedTask\n          ),\n        })\n      );\n    }\n  }\n\n  // Function to handle how the state should be updated when the action is triggered\n  @Action(AppError)\n  setAppError(\n    {patchState, getState}: StateContext<TaskStateModel>,\n    {payload}: AppError\n  ) {\n    const state = getState();\n    patchState({\n      error: !state.error,\n    });\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "payload",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 21,
        "jsdoctags": [
          {
            "name": "payload",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "payload",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 23,
          "modifierKind": [123]
        },
        {
          "name": "type",
          "defaultValue": "actions.PIN_TASK",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 21,
          "modifierKind": [124, 144]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    }
  ],
  "directives": [],
  "components": [
    {
      "name": "AppComponent",
      "id": "component-AppComponent-da165bb92f0c27fdeef687c1f76b811e828e1bdda36871d685cff173761b95b601df10e12ac341bbe2ebd7e160332c0ea1295a2188e5d8e8088f690aa927ca31",
      "file": "src/app/app.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-root",
      "styleUrls": ["./app.component.css"],
      "styles": [],
      "templateUrl": ["./app.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent {\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./app.component.css"
        }
      ],
      "stylesData": "",
      "templateData": "<app-inbox></app-inbox>\n"
    },
    {
      "name": "ButtonComponent",
      "id": "component-ButtonComponent-4ef205c97a334c309aa4001c8ab4a6d9571dcae18d0e85aaf0d367467ab5d3a9f13ab3573726f1fcb409bc9b49894dadfb80b1bbe1b6ba7041455ad9d4922004",
      "file": "src/stories/button.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "storybook-button",
      "styleUrls": ["./button.css"],
      "styles": [],
      "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "backgroundColor",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nWhat background color to use\n",
          "description": "<p>What background color to use</p>\n",
          "line": 26,
          "type": "string",
          "decorators": []
        },
        {
          "name": "label",
          "defaultValue": "'Button'",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 711,
              "end": 724,
              "flags": 4227072,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 325,
              "tagName": {
                "pos": 712,
                "end": 720,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "required"
              },
              "comment": ""
            }
          ],
          "rawdescription": "\n\nButton contents\n\n",
          "description": "<p>Button contents</p>\n",
          "line": 40,
          "type": "string",
          "decorators": []
        },
        {
          "name": "primary",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nIs this the principal call to action on the page?\n",
          "description": "<p>Is this the principal call to action on the page?</p>\n",
          "line": 20,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "defaultValue": "'medium'",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nHow large should the button be?\n",
          "description": "<p>How large should the button be?</p>\n",
          "line": 32,
          "type": "\"small\" | \"medium\" | \"large\"",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "onClick",
          "defaultValue": "new EventEmitter<Event>()",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nOptional click handler\n",
          "description": "<p>Optional click handler</p>\n",
          "line": 46,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
          "styleUrl": "./button.css"
        }
      ],
      "stylesData": "",
      "accessors": {
        "classes": {
          "name": "classes",
          "getSignature": {
            "name": "classes",
            "type": "[]",
            "returnType": "string[]",
            "line": 48
          }
        }
      }
    },
    {
      "name": "HeaderComponent",
      "id": "component-HeaderComponent-a557eec14f72c438a8033301f4d6ce023e0a1844a3b06ec2b38794a612acc31735ae78a5ee10071b230c8c20d699eb914554e69d07ade54adb371da8efb464cc",
      "file": "src/stories/header.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "storybook-header",
      "styleUrls": ["./header.css"],
      "styles": [],
      "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "user",
          "defaultValue": "null",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 65,
          "type": "User | null",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "onCreateAccount",
          "defaultValue": "new EventEmitter<Event>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 74,
          "type": "EventEmitter"
        },
        {
          "name": "onLogin",
          "defaultValue": "new EventEmitter<Event>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 68,
          "type": "EventEmitter"
        },
        {
          "name": "onLogout",
          "defaultValue": "new EventEmitter<Event>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 71,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n\n.welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
          "styleUrl": "./header.css"
        }
      ],
      "stylesData": ""
    },
    {
      "name": "InboxComponent",
      "id": "component-InboxComponent-d0a22ff0827c9295a97e9479dfc7ab91483e3e22a928788e8c94b91cd278d92a3bc317afcc38a59397a1dc8553d70d3630f7e90964e419420f4c2f6980ca39a5",
      "file": "src/app/inbox/inbox.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-inbox",
      "styleUrls": ["./inbox.component.css"],
      "styles": [],
      "templateUrl": ["./inbox.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "error$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<boolean>",
          "optional": false,
          "description": "",
          "line": 11
        }
      ],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {Store} from \"@ngxs/store\";\n\n@Component({\n  selector: 'app-inbox',\n  templateUrl: './inbox.component.html',\n  styleUrls: ['./inbox.component.css']\n})\nexport class InboxComponent {\n  error$: Observable<boolean>;\n\n  constructor(private store: Store) {\n    this.error$ = store.select((state) => state.taskbox.error);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./inbox.component.css"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 11,
        "jsdoctags": [
          {
            "name": "store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "templateData": "<app-inbox-screen [error]=\"error$ | async\"></app-inbox-screen>\n"
    },
    {
      "name": "InboxScreenComponent",
      "id": "component-InboxScreenComponent-2b0a77a6a0f16cd7ee447eba214ed328ebba059ce92f2da61dd094f2cbbd3a9c54284815d6fbb661bd4ba76f50ba2dbbbee7d5f0a5e387cbbc10f361a60678bc",
      "file": "src/app/inbox/inbox-screen/inbox-screen.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-inbox-screen",
      "styleUrls": ["./inbox-screen.component.css"],
      "styles": [],
      "templateUrl": ["./inbox-screen.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "error",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 9,
          "type": "any",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'app-inbox-screen',\n  templateUrl: './inbox-screen.component.html',\n  styleUrls: ['./inbox-screen.component.css']\n})\nexport class InboxScreenComponent {\n  @Input() error: any;\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./inbox-screen.component.css"
        }
      ],
      "stylesData": "",
      "templateData": "<div *ngIf=\"error\" class=\"page lists-show\">\n  <div class=\"wrapper-message\">\n    <span class=\"icon-face-sad\"></span>\n    <p class=\"title-message\">Oh no!</p>\n    <p class=\"subtitle-message\">Something went wrong</p>\n  </div>\n</div>\n\n<div *ngIf=\"!error\" class=\"page lists-show\">\n  <nav>\n    <h1 class=\"title-page\">Taskbox</h1>\n  </nav>\n  <app-task-list></app-task-list>\n</div>\n"
    },
    {
      "name": "PageComponent",
      "id": "component-PageComponent-7126d8c2607c946741c651482413b43feb72b2d63cac9d3ac173fde206a5e635eb4cdbf7ca7ac9327c7d4d05cf7ef619144c34c11609ad677081d0ee4e855064",
      "file": "src/stories/page.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "storybook-page",
      "styleUrls": ["./page.css"],
      "styles": [],
      "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "user",
          "defaultValue": "null",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "User | null",
          "optional": false,
          "description": "",
          "line": 64
        }
      ],
      "methodsClass": [
        {
          "name": "doCreateAccount",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 74,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "doLogin",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 70,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "doLogout",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 66,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nsection h2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nsection p {\n  margin: 1em 0;\n}\n\nsection a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nsection ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nsection li {\n  margin-bottom: 8px;\n}\n\nsection .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\nsection .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\nsection .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\nsection .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
          "styleUrl": "./page.css"
        }
      ],
      "stylesData": ""
    },
    {
      "name": "TaskComponent",
      "id": "component-TaskComponent-f76d9ccbb4cfad28c5a9ffbd32217b54c3861cd477989e4d1b3ba36b23b3b6635b12102cedae57ca8857936d8985226fbc027a0ae6c566249a2eeed22d34eeb8",
      "file": "src/app/tasks/task/task.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-task",
      "styleUrls": ["./task.component.css"],
      "styles": [],
      "templateUrl": ["./task.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "task",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 10,
          "type": "any",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "onArchiveTask",
          "defaultValue": "new EventEmitter<Event>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "EventEmitter"
        },
        {
          "name": "onPinTask",
          "defaultValue": "new EventEmitter<Event>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 14,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "onArchive",
          "args": [
            {
              "name": "id",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 31,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nComponent method to trigger the onArchive event\n",
          "description": "<p>Component method to trigger the onArchive event</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 672,
                "end": 674,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "id"
              },
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 666,
                "end": 671,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "<p>string</p>\n"
            }
          ]
        },
        {
          "name": "onPin",
          "args": [
            {
              "name": "id",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 24,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nComponent method to trigger the onPin event\n",
          "description": "<p>Component method to trigger the onPin event</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 533,
                "end": 535,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "id"
              },
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 527,
                "end": 532,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "<p>string</p>\n"
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\n@Component({\n  selector: 'app-task',\n  templateUrl: './task.component.html',\n  styleUrls: ['./task.component.css']\n})\nexport class TaskComponent {\n\n  @Input() task: any;\n\n  // tslint:disable-next-line: no-output-on-prefix\n  @Output()\n  onPinTask = new EventEmitter<Event>();\n\n  // tslint:disable-next-line: no-output-on-prefix\n  @Output()\n  onArchiveTask = new EventEmitter<Event>();\n\n  /**\n   * Component method to trigger the onPin event\n   * @param id string\n   */\n  onPin(id: any) {\n    this.onPinTask.emit(id);\n  }\n  /**\n   * Component method to trigger the onArchive event\n   * @param id string\n   */\n  onArchive(id: any) {\n    this.onArchiveTask.emit(id);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./task.component.css"
        }
      ],
      "stylesData": "",
      "templateData": "<div class=\"list-item {{ task?.state }}\">\n  <label\n    [attr.aria-label]=\"'archiveTask-' + task.id\"\n    for=\"checked-{{ task?.id }}\"\n    class=\"checkbox\"\n  >\n    <input\n      type=\"checkbox\"\n      disabled=\"true\"\n      [defaultChecked]=\"task?.state === 'TASK_ARCHIVED'\"\n      name=\"checked-{{ task?.id }}\"\n      id=\"checked-{{ task?.id }}\"\n    />\n    <span class=\"checkbox-custom\" (click)=\"onArchive(task.id)\"></span>\n  </label>\n  <label\n    [attr.aria-label]=\"task.title + ''\"\n    for=\"title-{{ task?.id }}\"\n    class=\"title\"\n  >\n    <input\n      type=\"text\"\n      [value]=\"task.title\"\n      readonly=\"true\"\n      id=\"title-{{ task?.id }}\"\n      name=\"title-{{ task?.id }}\"\n      placeholder=\"Input title\"\n      style=\"text-overflow: ellipsis;\"\n    />\n  </label>\n  <button\n    *ngIf=\"task?.state !== 'TASK_ARCHIVED'\"\n    class=\"pin-button\"\n    [attr.aria-label]=\"'pinTask-' + task.id\"\n    (click)=\"onPin(task.id)\"\n  >\n    <span class=\"icon-star\"></span>\n  </button>\n</div>\n"
    },
    {
      "name": "TaskListComponent",
      "id": "component-TaskListComponent-c8e319f781699c41bcced944d8108bc4568be85d162f5c15d2c473d7f4f598171c36fea484247ecb9fb605b94b4e6d6d250cad7657d7b5e64f232c8593e3635f",
      "file": "src/app/tasks/task-list/task-list.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-task-list",
      "styleUrls": ["./task-list.component.css"],
      "styles": [],
      "templateUrl": ["./task-list.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "loading",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "tasks",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "Task[]",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "onArchiveTask",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "EventEmitter<any>"
        },
        {
          "name": "onPinTask",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "EventEmitter<any>"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Task } from '../task/task';\n\n@Component({\n  selector: 'app-task-list',\n  templateUrl: './task-list.component.html',\n  styleUrls: ['./task-list.component.css']\n})\nexport class TaskListComponent {\n  /**\n   * @ignore\n   * Component property to define ordering of tasks\n   */\n  tasksInOrder: Task[] = [];\n\n  @Input() loading = false;\n\n  // tslint:disable-next-line: no-output-on-prefix\n  @Output() onPinTask: EventEmitter<any> = new EventEmitter();\n\n  // tslint:disable-next-line: no-output-on-prefix\n  @Output() onArchiveTask: EventEmitter<any> = new EventEmitter();\n\n  @Input()\n  set tasks(arr: Task[]) {\n    const initialTasks = [\n      ...arr.filter((t) => t.state === 'TASK_PINNED'),\n      ...arr.filter((t) => t.state !== 'TASK_PINNED'),\n    ];\n    const filteredTasks = initialTasks.filter(\n      (t) => t.state === 'TASK_INBOX' || t.state === 'TASK_PINNED'\n    );\n    this.tasksInOrder = filteredTasks.filter(\n      (t) => t.state === 'TASK_INBOX' || t.state === 'TASK_PINNED'\n    );\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".list-items {\n    border-radius: 15px;\n}\n\n.list-items:first-child {\n    /* border-radius: 15px; */\n    /* background-color: pink; */\n}",
          "styleUrl": "./task-list.component.css"
        }
      ],
      "stylesData": "",
      "accessors": {
        "tasks": {
          "name": "tasks",
          "setSignature": {
            "name": "tasks",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "arr",
                "type": "Task[]",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 25,
            "jsdoctags": [
              {
                "name": "arr",
                "type": "Task[]",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        }
      },
      "templateData": "<div class=\"list-items\">\n  <app-task\n    *ngFor=\"let task of tasksInOrder\"\n    [task]=\"task\"\n    (onArchiveTask)=\"onArchiveTask.emit($event)\"\n    (onPinTask)=\"onPinTask.emit($event)\"\n  >\n  </app-task>\n  <div *ngIf=\"tasksInOrder.length === 0 && !loading\" class=\"wrapper-message\">\n    <span class=\"icon-check\"></span>\n    <p class=\"title-message\">You have no tasks</p>\n    <p class=\"subtitle-message\">Sit back and relax</p>\n  </div>\n  <div *ngIf=\"loading\">\n    <div *ngFor=\"let i of [1, 2, 3, 4, 5, 6]\" class=\"loading-item\">\n      <span class=\"glow-checkbox\"></span>\n      <span class=\"glow-text\">\n        <span>Loading</span> <span>cool</span> <span>state</span>\n      </span>\n    </div>\n  </div>\n</div>\n"
    },
    {
      "name": "TasksComponent",
      "id": "component-TasksComponent-f66d2aac0cd793572b46a5e99d008c3106858395aedb2ead660c425dace86242453c5e92485f4ebbb3d1edf3212dca57aa6ee0ea747db89ca56a36484495bf75",
      "file": "src/app/tasks/tasks.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-tasks",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./tasks.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "tasks$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<any>",
          "optional": true,
          "description": "",
          "line": 11
        }
      ],
      "methodsClass": [
        {
          "name": "archiveTask",
          "args": [
            {
              "name": "id",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 20,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nComponent method to trigger the archiveTask event\n",
          "description": "<p>Component method to trigger the archiveTask event</p>\n",
          "jsdoctags": [
            {
              "name": "id",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "pinTask",
          "args": [
            {
              "name": "id",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 27,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nComponent method to trigger the pinTask event\n",
          "description": "<p>Component method to trigger the pinTask event</p>\n",
          "jsdoctags": [
            {
              "name": "id",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core';\nimport { Store } from '@ngxs/store';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { ArchiveTask, PinTask } from '../state/task.state';\n\n@Component({\n  selector: 'app-tasks',\n  templateUrl: './tasks.component.html',\n})\nexport class TasksComponent {\n  tasks$?: Observable<any>;\n\n  constructor(private store: Store) {\n    this.tasks$ = store.select((state) => state.taskbox.tasks);\n  }\n\n  /**\n   * Component method to trigger the archiveTask event\n   */\n  archiveTask(id: string) {\n    this.store.dispatch(new ArchiveTask(id));\n  }\n\n  /**\n   * Component method to trigger the pinTask event\n   */\n  pinTask(id: string) {\n    this.store.dispatch(new PinTask(id));\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 11,
        "jsdoctags": [
          {
            "name": "store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "templateData": "<app-task-list\n  [tasks]=\"tasks$ | async\"\n  (onArchiveTask)=\"archiveTask($event)\"\n  (onPinTask)=\"pinTask($event)\"\n></app-task-list>\n"
    }
  ],
  "modules": [
    {
      "name": "AppModule",
      "id": "module-AppModule-a33fbcaf9332bbfa067098eef185876b1b43b484df53071b2b6dcf8856643bee2d6c18428e962bcb8da258a7a11d2a34bc2565a4c230be488ccd164bfc07d853",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/app.module.ts",
      "methods": [],
      "sourceCode": "import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { TasksModule } from './tasks/tasks.module';\nimport { NgxsModule } from '@ngxs/store';\nimport { NgxsReduxDevtoolsPluginModule } from '@ngxs/devtools-plugin';\nimport { NgxsLoggerPluginModule } from '@ngxs/logger-plugin';\n\nimport { environment } from '../environments/environment';\nimport { AppComponent } from './app.component';\nimport { InboxComponent } from './inbox/inbox.component';\nimport { InboxScreenComponent } from './inbox/inbox-screen/inbox-screen.component';\n\n@NgModule({\n  declarations: [AppComponent, InboxComponent, InboxScreenComponent],\n  imports: [\n    BrowserModule,\n    TasksModule,\n    NgxsModule.forRoot([], {\n      developmentMode: !environment.production,\n    }),\n    NgxsReduxDevtoolsPluginModule.forRoot(),\n    NgxsLoggerPluginModule.forRoot({\n      disabled: environment.production,\n    }),\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule { }\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "AppComponent"
            },
            {
              "name": "InboxComponent"
            },
            {
              "name": "InboxScreenComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "TasksModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": [
            {
              "name": "AppComponent"
            }
          ]
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "TasksModule",
      "id": "module-TasksModule-7c89acbb62ad68022303268973047ecf81ef28127188309ec1898fef2fd321a542ebfd6e82b7c815d2f38791e8ea677f5c655b86456c901cb1c3d3d5e8fa481c",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/tasks/tasks.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgxsModule } from '@ngxs/store';\nimport { TasksState } from '../state/task.state';\nimport { TaskListComponent } from './task-list/task-list.component';\nimport { TaskComponent } from './task/task.component';\nimport { TasksComponent } from './tasks.component';\n\n@NgModule({\n  imports: [CommonModule, NgxsModule.forFeature([TasksState])],\n  exports: [TaskComponent, TasksComponent, TaskListComponent],\n  declarations: [TaskComponent, TasksComponent, TaskListComponent],\n  providers: [],\n})\nexport class TasksModule { }\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "TaskComponent"
            },
            {
              "name": "TaskListComponent"
            },
            {
              "name": "TasksComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "TaskComponent"
            },
            {
              "name": "TaskListComponent"
            },
            {
              "name": "TasksComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    }
  ],
  "miscellaneous": {
    "variables": [
      {
        "name": "actions",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/state/task.state.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\n  PIN_TASK: 'PIN_TASK',\n  ERROR: 'APP_ERROR',\n}"
      },
      {
        "name": "actionsData",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/tasks/task/task.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\n    onPinTask: action('onPinTask'),\n    onArchiveTask: action('onArchiveTask'),\n}"
      },
      {
        "name": "Archived",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/tasks/task/task.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "Default",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/inbox/inbox-screen/inbox-screen.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "Default",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/tasks/task/task.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "Default",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/tasks/task-list/task-list.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "defaultTasks",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/state/task.state.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  {id: '1', title: 'Something', state: 'TASK_INBOX'},\n  {id: '2', title: 'Something more', state: 'TASK_INBOX'},\n  {id: '3', title: 'Something else', state: 'TASK_INBOX'},\n  {id: '4', title: 'Something again', state: 'TASK_INBOX'},\n]"
      },
      {
        "name": "Empty",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/tasks/task-list/task-list.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "environment",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/environments/environment.prod.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\n  production: true\n}"
      },
      {
        "name": "environment",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/environments/environment.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\n  production: false\n}"
      },
      {
        "name": "Error",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/inbox/inbox-screen/inbox-screen.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "Large",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/Button.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "Loading",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/tasks/task-list/task-list.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "LoggedIn",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/Header.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "LoggedIn",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/Page.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "LoggedOut",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/Header.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "LoggedOut",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/Page.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "Pinned",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/tasks/task/task.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "Primary",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/Button.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "Secondary",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/Button.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "Small",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/Button.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "Template",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/Button.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<Button>",
        "defaultValue": "(args: Button) => ({\n  props: args,\n})"
      },
      {
        "name": "Template",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/Header.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<Header>",
        "defaultValue": "(args: Header) => ({\n  props: args,\n})"
      },
      {
        "name": "Template",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/Page.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<Page>",
        "defaultValue": "(args: Page) => ({\n  props: args,\n})"
      },
      {
        "name": "Template",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/inbox/inbox-screen/inbox-screen.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "args => ({\n  props: args,\n})"
      },
      {
        "name": "Template",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/tasks/task/task.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "args => ({\n    props: {\n        ...args,\n        onPinTask: actionsData.onPinTask,\n        onArchiveTask: actionsData.onArchiveTask,\n    },\n})"
      },
      {
        "name": "Template",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/tasks/task-list/task-list.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "args => ({\n    props: {\n        ...args,\n        onPinTask: TaskStories.actionsData.onPinTask,\n        onArchiveTask: TaskStories.actionsData.onArchiveTask,\n    },\n})"
      },
      {
        "name": "WithInteractions",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/inbox/inbox-screen/inbox-screen.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "WithPinnedTasks",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/tasks/task-list/task-list.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      }
    ],
    "functions": [],
    "typealiases": [],
    "enumerations": [],
    "groupedVariables": {
      "src/app/state/task.state.ts": [
        {
          "name": "actions",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/state/task.state.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\n  PIN_TASK: 'PIN_TASK',\n  ERROR: 'APP_ERROR',\n}"
        },
        {
          "name": "defaultTasks",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/state/task.state.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  {id: '1', title: 'Something', state: 'TASK_INBOX'},\n  {id: '2', title: 'Something more', state: 'TASK_INBOX'},\n  {id: '3', title: 'Something else', state: 'TASK_INBOX'},\n  {id: '4', title: 'Something again', state: 'TASK_INBOX'},\n]"
        }
      ],
      "src/app/tasks/task/task.stories.ts": [
        {
          "name": "actionsData",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/tasks/task/task.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\n    onPinTask: action('onPinTask'),\n    onArchiveTask: action('onArchiveTask'),\n}"
        },
        {
          "name": "Archived",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/tasks/task/task.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Default",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/tasks/task/task.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Pinned",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/tasks/task/task.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Template",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/tasks/task/task.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "args => ({\n    props: {\n        ...args,\n        onPinTask: actionsData.onPinTask,\n        onArchiveTask: actionsData.onArchiveTask,\n    },\n})"
        }
      ],
      "src/app/inbox/inbox-screen/inbox-screen.stories.ts": [
        {
          "name": "Default",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/inbox/inbox-screen/inbox-screen.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Error",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/inbox/inbox-screen/inbox-screen.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Template",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/inbox/inbox-screen/inbox-screen.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "args => ({\n  props: args,\n})"
        },
        {
          "name": "WithInteractions",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/inbox/inbox-screen/inbox-screen.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        }
      ],
      "src/app/tasks/task-list/task-list.stories.ts": [
        {
          "name": "Default",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/tasks/task-list/task-list.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Empty",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/tasks/task-list/task-list.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Loading",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/tasks/task-list/task-list.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Template",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/tasks/task-list/task-list.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "args => ({\n    props: {\n        ...args,\n        onPinTask: TaskStories.actionsData.onPinTask,\n        onArchiveTask: TaskStories.actionsData.onArchiveTask,\n    },\n})"
        },
        {
          "name": "WithPinnedTasks",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/tasks/task-list/task-list.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        }
      ],
      "src/environments/environment.prod.ts": [
        {
          "name": "environment",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/environments/environment.prod.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\n  production: true\n}"
        }
      ],
      "src/environments/environment.ts": [
        {
          "name": "environment",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/environments/environment.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\n  production: false\n}"
        }
      ],
      "src/stories/Button.stories.ts": [
        {
          "name": "Large",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/Button.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Primary",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/Button.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Secondary",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/Button.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Small",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/Button.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Template",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/Button.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<Button>",
          "defaultValue": "(args: Button) => ({\n  props: args,\n})"
        }
      ],
      "src/stories/Header.stories.ts": [
        {
          "name": "LoggedIn",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/Header.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "LoggedOut",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/Header.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Template",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/Header.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<Header>",
          "defaultValue": "(args: Header) => ({\n  props: args,\n})"
        }
      ],
      "src/stories/Page.stories.ts": [
        {
          "name": "LoggedIn",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/Page.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "LoggedOut",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/Page.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Template",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/Page.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<Page>",
          "defaultValue": "(args: Page) => ({\n  props: args,\n})"
        }
      ]
    },
    "groupedFunctions": {},
    "groupedEnumerations": {},
    "groupedTypeAliases": {}
  },
  "routes": [],
  "coverage": {
    "count": 3,
    "status": "low",
    "files": [
      {
        "filePath": "src/app/app.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "AppComponent",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/inbox/inbox-screen/inbox-screen.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "InboxScreenComponent",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/inbox/inbox-screen/inbox-screen.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Default",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/inbox/inbox-screen/inbox-screen.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Error",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/inbox/inbox-screen/inbox-screen.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Template",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/inbox/inbox-screen/inbox-screen.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "WithInteractions",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/inbox/inbox.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "InboxComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/state/task.state.ts",
        "type": "class",
        "linktype": "classe",
        "name": "AppError",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/task.state.ts",
        "type": "class",
        "linktype": "classe",
        "name": "ArchiveTask",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/task.state.ts",
        "type": "class",
        "linktype": "classe",
        "name": "PinTask",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/task.state.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "TasksState",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/app/state/task.state.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "TaskStateModel",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/task.state.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "actions",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/state/task.state.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "defaultTasks",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/tasks/task-list/task-list.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "TaskListComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/tasks/task-list/task-list.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Default",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/tasks/task-list/task-list.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Empty",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/tasks/task-list/task-list.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Loading",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/tasks/task-list/task-list.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Template",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/tasks/task-list/task-list.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "WithPinnedTasks",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/tasks/task/task.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "TaskComponent",
        "coveragePercent": 33,
        "coverageCount": "2/6",
        "status": "medium"
      },
      {
        "filePath": "src/app/tasks/task/task.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "actionsData",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/tasks/task/task.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Archived",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/tasks/task/task.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Default",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/tasks/task/task.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Pinned",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/tasks/task/task.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Template",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/tasks/task/task.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "Task",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/tasks/tasks.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "TasksComponent",
        "coveragePercent": 40,
        "coverageCount": "2/5",
        "status": "medium"
      },
      {
        "filePath": "src/environments/environment.prod.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "environment",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/environments/environment.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "environment",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/Button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Large",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/Button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Primary",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/Button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Secondary",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/Button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Small",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/Button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Template",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/Header.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "LoggedIn",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/Header.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "LoggedOut",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/Header.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Template",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/Page.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "LoggedIn",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/Page.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "LoggedOut",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/Page.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Template",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/User.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "User",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/button.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ButtonComponent",
        "coveragePercent": 83,
        "coverageCount": "5/6",
        "status": "very-good"
      },
      {
        "filePath": "src/stories/header.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "HeaderComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/stories/page.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "PageComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      }
    ]
  }
}
